import React, { Component } from 'react'

export default class Portfolio extends Component {
    render() {
        return (
            <div>
                <div div >
                    <div className="card z-depth-0">
                        <div className="card-content social">
                            <h6>
                                <strong>
                                    <i className="fas fa-laptop-code"></i>  ОПЫТ В ПРОГРАММИРОВАНИИ
                                </strong>
                            </h6>
                            <div className="row mt">
                                <div className="col s12">
                                    <blockquote className="content-right">
                                        <p className="pt">
                                            Программирование изучаю самостоятельно с 2017 по настоящее время. <br />
                                            <br />
                                            Программа обучения сложилась в 4 основных этапа:<br />
                                            1.	Старт изучения. Обучение на интерактивных платформах, таких как javarush.<br />
                                            2.	Дополнительная нагрузка. Подключение теории, stackoverflow, книги:<br />
                                            &nbsp;&nbsp;&nbsp;&nbsp;•	Кей Хорстманн, Гари Корнелл, Java 2. Библиотека профессионала. Том 1. Основы;<br />
                                            &nbsp;&nbsp;&nbsp;&nbsp;•	Кей Хорстманн, Гари Корнелл, Java 2. Библиотека профессионала. Том 2. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Расширенные средства программирования;<br />
                                            &nbsp;&nbsp;&nbsp;&nbsp;•	Брюс Эккель, Философия Java;<br />
                                            &nbsp;&nbsp;&nbsp;•	Герберт Шилдт, Java 8 Полное руководство, девятое издание;<br />
                                            &nbsp;&nbsp;&nbsp;•	Роберт Мартин, Чистый код;<br />
                                            &nbsp;&nbsp;&nbsp;•	Эрик Фримен, Элизабет Робсон, Head First Паттерны проектирования;<br />
                                            &nbsp;&nbsp;&nbsp;•	Фелипе Гутьеррес, Spring Boot 2 Лучшие практики для профессионалов<br />
                                            3.	Постановка целей и реализация. Просьба друзей, погруженных в профессию, сформулировать и поставить задачу.
                                            Первые наброски чего-то работающего: https://github.com/knockjkeee/company_web_servlet  (попытка написать мультипликатор,  акцентируя свое внимание на сервлетах)<br />
                                            4.	Расширение кругозора. Изучение новых технологий, экосистема Spring, Spring Cloud, WebSocket, работа с БД, Визуализация через templates (freemarker, mustache). Востребованные технологии черпал с ресурсов по подбору персонала.<br />
                                            <br />
                                            В силу загрузки на постоянном месте работы, погружение в процесс обучения иногда носил «рваный» характер.<br />
                                            Были и продолжительные паузы, и преодолевание «плато». Так же были моменты, когда имело место отступление от выбранного направления, на другие языки и технологии, в части языка Python, в части технологий machine learning, computer vision, web scraping.<br />
                                            <br />
                                            На предыдущем месте работы, Техносерв, удалось решить, в качестве факультативной, но в рамках реального прикладного проекта с юзеркейсом, небольшую задачу, в результате дополнительно расширился кругозор в применении технологий.<br />
                                            <br />
                                            Подробнее о задаче:<br />
                                            Реализован прототип микросервисов информирования ответственных лиц по посещаемости учебного заведения (Колледж).<br />
                                            Основной упор был на контроль входа (оценка воровства карт доступа) и выхода (прогулов) учеников в/из учебного заведении. Сбор данных с турникетов СКУД (база данных), и системы распознавания лиц ISS (websocket) в режиме реального времени с последующей обработкой и структурировании информации.<br />
                                            <br />
                                            Используемые технологии: Spring Boot, Spring MVC, Spring Data JPA, Websocket, Spring Cloud Netflix Eureka, Spring Cloud Netflix Zuul.<br />
                                            База данных: Postgresql, MySQL (база колледжа).<br />
                                            Мобильная разработка: Flutter apk.<br />
                                            Деплой проекта был выполнен на сервер колледжа.<br />
                                            <br />
                                            Github - https://github.com/knockjkeee/school_control &nbsp;&nbsp;
                                            <a href="https://github.com/knockjkeee/school_control" target="blank">
                                                <i className="fab fa-github-square fa-2x"></i>
                                            </a> <br />
                                            Состав:<br />
                                            1.	netflix-eureka-dashboard-server - регистрация микросервисов<br />
                                            2.	netflix-zuul-proxy-service - прокси, шлюз, промежуточный уровень между пользователями и сервисами<br />
                                            3.	capture-match-verification-cam-service - аналитика верификации лиц при входе в учебное заведение<br />
                                            4.	capture-detection-cam-verification-service - аналитика всех детектируемых лиц при входе в учебное заведение<br />
                                            5.	control-out-service - аналитика выхода из учебного заведения основанное на текущем расписании<br />
                                            6.	parse-school-schedule - загрузка текущего расписания в базу данных<br />
                                            7.	view-start-page - стартовая страница визуальной маршрутизации сервисов<br />
                                            8.	view-verification-page - визуализация структурированной информации о входе в учебное заведение<br />
                                            9.	view-control-out-page - визуализация структурированной информации о выходе из учебного заведения<br />
                                            10.	control-out-service-ws - монитор охранника для своевременного реагирования при выходе ученика через турникет<br />
                                            11.	control-out-service-ws-without-stomp-protocol - сервис для отправки сообщений о прогуле на мобильное приложение (Маленькое приложение, как пейджер, на Flutter)<br />

                                            <br />
                                            Еще пробовал React:<br />
                                            Github - https://github.com/knockjkeee/voda_template<br />
                                            Простенький Landing page: https://knockjkeee.github.io/voda-app/<br />
                                            <br />
                                            Для простых задач, автоматизация рутины, использую Python. Как пример, посчитать количество и определить формат, pdf страниц готового проекта (в среднем, в проекте более 10 000 страниц), без рекурсии, в базовой директории.<br />

                                        </p>
                                    </blockquote>
                                </div>
                            </div>
                        </div >
                    </div >
                </div>
            </div>
        )
    }
}
